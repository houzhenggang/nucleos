/*
 *  Copyright (C) 2010  Ladislav Klenovic <klenovic@nucleonsoft.com>
 *
 *  This file is part of Nucleos kernel.
 *
 *  Nucleos kernel is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, version 2 of the License.
 */
/* The <stdlib.h> header defines certain common macros, types, and functions.*/

#ifndef _STDLIB_H
#define _STDLIB_H

/* The macros are NULL, EXIT_FAILURE, EXIT_SUCCESS, RAND_MAX, and MB_CUR_MAX.*/
#define NULL    ((void *)0)

#define EXIT_FAILURE       1	/* standard error return using exit() */
#define EXIT_SUCCESS       0	/* successful return using exit() */
#define RAND_MAX       32767	/* largest value generated by rand() */
#define MB_CUR_MAX         1	/* max value of multibyte character in MINIX */

typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;

/* The types are size_t, wchar_t, div_t, and ldiv_t. */
#ifndef _SIZE_T
#define _SIZE_T
typedef unsigned int size_t;	/* type returned by sizeof */
#endif

#ifndef _WCHAR_T
#define _WCHAR_T
typedef char wchar_t;		/* type expanded character set */
#endif


/* Function Prototypes. */
void abort(void);
int atexit(void (*_func)(void));
double atof(const char *_nptr);
long atol(const char *_nptr);
void *calloc(size_t _nmemb, size_t _size);
div_t div(int _numer, int _denom);
void exit(int _status);
void free(void *_ptr);
char *getenv(const char *_name);
long labs(long _j);
ldiv_t ldiv(long _numer, long _denom);
void *malloc(size_t _size);
int rand(void);
void *realloc(void *_ptr, size_t _size);
void srand(unsigned int _seed);
double strtod(const char *_nptr, char **_endptr);
long strtol(const char *_nptr, char **_endptr, int _base);
int system(const char *_string);
unsigned long int strtoul(const char *_nptr, char **_endptr, int _base);

/* Open Group Base Specifications Issue 6 */
char *initstate(unsigned _seed, char *_state, size_t _size);
long random(void);
char *setstate(const char *state);
void srandom(unsigned seed);
int putenv(char *string);
int setenv(const char *envname, const char *envval, int overwrite);
int unsetenv(const char *name);

int getloadavg(double *, int);

static inline int atoi(const char *nptr) {
	return strtol(nptr, (char **) NULL, 10);
}

/* According to POSIX, getopt should be in unistd.h. What do we do with
 * this?
 */
int getopt(int _argc, char * const _argv[], const char *_opts);
extern char *optarg;
extern int optind, opterr, optopt;

#endif /* STDLIB_H */
