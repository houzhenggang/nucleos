# Select 32 or 64 bit

# n/a
config 64BIT
	def_bool n

config X86_32
	def_bool !64BIT

config X86_64
	def_bool 64BIT

### Arch settings
config X86
	def_bool y

# x86 configuration
mainmenu "Nucleos Configuration for x86"

config ARCH_DEFCONFIG
	string
	default "arch/x86/configs/i386_defconfig" if X86_32
	default "arch/x86/configs/x86_64_defconfig" if X86_64

config ARCH_SELECT_MEMORY_MODEL
	def_bool y

config PAGE_OFFSET
	hex
	default 0x00000000
	depends on X86_32


config ARCH_SUPPORTS_OPTIMIZED_INLINING
	def_bool y

source "Kconfig"

# Kernel options
source "arch/x86/kernel/Kconfig"

menu "Processor type and features"

source "arch/x86/Kconfig.cpu"
source "kernel/Kconfig.hz"
source "mm/Kconfig"

config SMP
	bool "Symmetric multi-processing support"
	default n
	---help---
	  NOTE: NOT IMPLEMETED AD INTERIM

	  This enables support for systems with more than one CPU. If you have
	  a system with only one CPU, like most personal computers, say N. If
	  you have a system with more than one CPU, say Y.

	  If you don't know what to do here, say N.

config X86_UP_APIC
	bool "Local APIC support on uniprocessors"
	depends on X86_32 && !SMP
	---help---
	  A local APIC (Advanced Programmable Interrupt Controller) is an
	  integrated interrupt controller in the CPU. If you have a single-CPU
	  system which has a processor with a local APIC, you can say Y here to
	  enable and use it. The local APIC supports CPU-generated self-interrupts
	  (timer, performance counters), and the NMI watchdog which detects hard
	  lockups.

config X86_UP_IOAPIC
	bool "IO-APIC support on uniprocessors"
	depends on X86_UP_APIC
	---help---
	  An IO-APIC (I/O Advanced Programmable Interrupt Controller) is an
	  SMP-capable replacement for PC-style interrupt controllers. Most
	  SMP systems and many recent uniprocessor systems have one.

	  If you have a single-CPU system with an IO-APIC, you can say Y here
	  to use it.

config X86_LOCAL_APIC
	def_bool y
	depends on SMP || X86_UP_APIC

config DEBUG_X86_LOCAL_APIC
	def_bool n
	depends on X86_LOCAL_APIC
	---help---
	  Debug APIC.

config X86_IO_APIC
	def_bool y
	depends on SMP || X86_UP_APIC

config PHYSICAL_START
	hex "Physical address where the kernel is loaded"
	default "0x1000000"
	---help---
	  This gives the physical address where the kernel is loaded.

	  Don't change this unless you know what you are doing.

config PHYSICAL_ALIGN
	hex "Alignment value to which kernel should be aligned" if X86_32
	default "0x1000000"
	range 0x2000 0x1000000
	---help---
	  This value puts the alignment restrictions on physical address
	  where kernel is loaded and run from. Kernel is compiled for an
	  address which meets above alignment restriction.

	  Don't change this unless you know what you are doing.

endmenu

menu "Bus options (PCI etc.)"

config PCI
	bool "PCI support"
	default y
	---help---
	  Find out whether you have a PCI motherboard. PCI is the name of a
	  bus system, i.e. the way the CPU talks to the other stuff inside
	  your box. Other bus systems are ISA, EISA, MicroChannel (MCA) or
	  VESA. If you have PCI, say Y, otherwise N.

# PCI driver
source "drivers/pci/Kconfig"

endmenu


# Servers (includes also debug options if any)
source "arch/x86/servers/Kconfig"

# Drivers (includes also debug options if any)
source "drivers/Kconfig"

menu "Linkage"
# @nucleos: add some usefull configs
endmenu

# Hacking/debugging (common for all components, generic + arch if any)
source "arch/x86/Kconfig.debug"
